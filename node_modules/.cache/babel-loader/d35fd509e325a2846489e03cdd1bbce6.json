{"ast":null,"code":"export const initialGame = [[null, null, null], [null, null, null], [null, null, null]]; //export let historique: [Game] = [initialGame];\n\nexport const isFirstPlayerTurn = game => {\n  const emptyCells = game.reduce((acc, row) => acc.concat(row), []).filter(cell => cell === null);\n  return emptyCells.length % 2 !== 0;\n};\nexport const getWinner = game => {\n  const getOwner = line => line.every(cell => cell === line[0]) ? line[0] : null;\n\n  const columns = game.map((_, y) => game.map((_, x) => game[x][y]));\n  const diagonals = [game.map((_, y) => game[y][y]), game.map((_, y) => game[y][2 - y])];\n  const lines = [...game, ...columns, ...diagonals];\n  return lines.reduce((winner, line) => winner || getOwner(line), null);\n};\n/*export const oldplay = (game: Game, x: number, y: number) =>\n  getWinner(game) || game[x][y]\n    ? game\n    : game.map((row, currentX) =>\n        currentX !== x\n          ? row\n          : row.map((cell, currentY) =>\n              currentY === y ? (isFirstPlayerTurn(game) ? 1 : 2) : cell\n            )\n      );*/\n\nexport const play = (game, x, y) => {\n  if (getWinner(game) || game[x][y]) {\n    return game;\n  } else {\n    const newGame = game.map((row, currentX) => currentX !== x ? row : row.map((cell, currentY) => currentY === y ? isFirstPlayerTurn(game) ? 1 : 2 : cell));\n    historique.push(newGame);\n    console.log(historique.length);\n    return newGame;\n  }\n};","map":{"version":3,"sources":["/Users/lpiem/react/tictactoes/src/game_logique.tsx"],"names":["initialGame","isFirstPlayerTurn","game","emptyCells","reduce","acc","row","concat","filter","cell","length","getWinner","getOwner","line","every","columns","map","_","y","x","diagonals","lines","winner","play","newGame","currentX","currentY","historique","push","console","log"],"mappings":"AAOA,OAAO,MAAMA,WAAiB,GAAG,CAC7B,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAD6B,EAE7B,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAF6B,EAG7B,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAH6B,CAA1B,C,CAMP;;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,IAAD,IAAyB;AACtD,QAAMC,UAAU,GAAGD,IAAI,CAClBE,MADc,CACC,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,CAACE,MAAJ,CAAWD,GAAX,CADf,EACgC,EADhC,EAEdE,MAFc,CAEPC,IAAI,IAAIA,IAAI,KAAK,IAFV,CAAnB;AAIA,SAAON,UAAU,CAACO,MAAX,GAAoB,CAApB,KAA0B,CAAjC;AACH,CANM;AAQP,OAAO,MAAMC,SAAS,GAAIT,IAAD,IAAwB;AAC7C,QAAMU,QAAQ,GAAIC,IAAD,IACjBA,IAAI,CAACC,KAAL,CAAWL,IAAI,IAAIA,IAAI,KAAKI,IAAI,CAAC,CAAD,CAAhC,IAAuCA,IAAI,CAAC,CAAD,CAA3C,GAAiD,IADjD;;AAGA,QAAME,OAAO,GAAGb,IAAI,CAACc,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUhB,IAAI,CAACc,GAAL,CAAS,CAACC,CAAD,EAAIE,CAAJ,KAAUjB,IAAI,CAACiB,CAAD,CAAJ,CAAQD,CAAR,CAAnB,CAAnB,CAAhB;AACA,QAAME,SAAS,GAAG,CAClBlB,IAAI,CAACc,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUhB,IAAI,CAACgB,CAAD,CAAJ,CAAQA,CAAR,CAAnB,CADkB,EAElBhB,IAAI,CAACc,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUhB,IAAI,CAACgB,CAAD,CAAJ,CAAQ,IAAIA,CAAZ,CAAnB,CAFkB,CAAlB;AAIA,QAAMG,KAAK,GAAG,CAAC,GAAGnB,IAAJ,EAAU,GAAGa,OAAb,EAAsB,GAAGK,SAAzB,CAAd;AAEA,SAAOC,KAAK,CAACjB,MAAN,CAAoB,CAACkB,MAAD,EAAST,IAAT,KAAkBS,MAAM,IAAIV,QAAQ,CAACC,IAAD,CAAxD,EAAgE,IAAhE,CAAP;AACH,CAZM;AAcP;;;;;;;;;;;AAWA,OAAO,MAAMU,IAAI,GAAG,CAACrB,IAAD,EAAaiB,CAAb,EAAwBD,CAAxB,KAAsC;AACtD,MAAIP,SAAS,CAACT,IAAD,CAAT,IAAmBA,IAAI,CAACiB,CAAD,CAAJ,CAAQD,CAAR,CAAvB,EAAkC;AAC9B,WAAOhB,IAAP;AACH,GAFD,MAEK;AACD,UAAMsB,OAAa,GAAGtB,IAAI,CAACc,GAAL,CAAS,CAACV,GAAD,EAAMmB,QAAN,KAC3BA,QAAQ,KAAKN,CAAb,GACEb,GADF,GAEEA,GAAG,CAACU,GAAJ,CAAQ,CAACP,IAAD,EAAOiB,QAAP,KACNA,QAAQ,KAAKR,CAAb,GAAkBjB,iBAAiB,CAACC,IAAD,CAAjB,GAA0B,CAA1B,GAA8B,CAAhD,GAAqDO,IADvD,CAHgB,CAAtB;AAOAkB,IAAAA,UAAU,CAACC,IAAX,CAAgBJ,OAAhB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,UAAU,CAACjB,MAAvB;AACA,WAAOc,OAAP;AACH;AACJ,CAfM","sourcesContent":["export type Cell = 1 | 2 | null;\nexport type Winner = Cell\nexport type Owner = Cell\nexport type Row = Cell[];\nexport type Line = Row;\nexport type Game = Row[];\n\nexport const initialGame: Game = [\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n];\n\n//export let historique: [Game] = [initialGame];\n\nexport const isFirstPlayerTurn = (game: Game): boolean => {\n    const emptyCells = game\n        .reduce<Cell[]>((acc, row) => acc.concat(row), [])\n        .filter(cell => cell === null);\n\n    return emptyCells.length % 2 !== 0;\n};\n\nexport const getWinner = (game: Game): Winner => {\n    const getOwner = (line: Line): Owner =>\n    line.every(cell => cell === line[0]) ? line[0] : null;\n\n    const columns = game.map((_, y) => game.map((_, x) => game[x][y]));\n    const diagonals = [\n    game.map((_, y) => game[y][y]),\n    game.map((_, y) => game[y][2 - y])\n    ];\n    const lines = [...game, ...columns, ...diagonals];\n\n    return lines.reduce<Owner>((winner, line) => winner || getOwner(line), null);\n};\n\n/*export const oldplay = (game: Game, x: number, y: number) =>\n  getWinner(game) || game[x][y]\n    ? game\n    : game.map((row, currentX) =>\n        currentX !== x\n          ? row\n          : row.map((cell, currentY) =>\n              currentY === y ? (isFirstPlayerTurn(game) ? 1 : 2) : cell\n            )\n      );*/\n\nexport const play = (game: Game, x: number, y: number) => {\n    if (getWinner(game) || game[x][y]){\n        return game;\n    }else{\n        const newGame: Game = game.map((row, currentX) =>\n            currentX !== x\n            ? row\n            : row.map((cell, currentY) =>\n                currentY === y ? (isFirstPlayerTurn(game) ? 1 : 2) : cell\n                )\n        );\n        historique.push(newGame);\n        console.log(historique.length)\n        return newGame;\n    }     \n}\n"]},"metadata":{},"sourceType":"module"}