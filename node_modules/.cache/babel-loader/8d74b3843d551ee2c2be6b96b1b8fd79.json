{"ast":null,"code":"var _jsxFileName = \"/Users/imac/React/tictactoes/src/index.tsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nconst initialGame = [[null, null, null], [null, null, null], [null, null, null]];\n\nconst isFirstPlayerTurn = game => {\n  const emptyCells = game.reduce((acc, row) => acc.concat(row), []).filter(cell => cell === null);\n  return emptyCells.length % 2 !== 0;\n};\n\nconst getWinner = game => {\n  const getOwner = line => line.every(cell => cell === line[0]) ? line[0] : null;\n\n  const columns = game.map((_, y) => game.map((_, x) => game[x][y]));\n  const diagonals = [game.map((_, y) => game[y][y]), game.map((_, y) => game[y][2 - y])];\n  const lines = [...game, ...columns, ...diagonals];\n  return lines.reduce((winner, line) => winner || getOwner(line), null);\n};\n\nconst play = (game, x, y) => {\n  if (!getWinner(game) && !game[y][x]) {\n    game[y][x] = isFirstPlayerTurn(game) ? 1 : 2;\n  }\n};\n\nReactDOM.render(React.createElement(App, {\n  onClick: () => {},\n  appGame: initialGame,\n  winner: getWinner(),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/imac/React/tictactoes/src/index.tsx"],"names":["React","ReactDOM","App","serviceWorker","initialGame","isFirstPlayerTurn","game","emptyCells","reduce","acc","row","concat","filter","cell","length","getWinner","getOwner","line","every","columns","map","_","y","x","diagonals","lines","winner","play","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AASA,MAAMC,WAAiB,GAAG,CACtB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CADsB,EAEtB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAFsB,EAGtB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAHsB,CAA1B;;AAMA,MAAMC,iBAAiB,GAAIC,IAAD,IAAyB;AAC/C,QAAMC,UAAU,GAAGD,IAAI,CACpBE,MADgB,CACD,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,CAACE,MAAJ,CAAWD,GAAX,CADb,EAC8B,EAD9B,EAEhBE,MAFgB,CAETC,IAAI,IAAIA,IAAI,KAAK,IAFR,CAAnB;AAIA,SAAON,UAAU,CAACO,MAAX,GAAoB,CAApB,KAA0B,CAAjC;AACD,CANH;;AAQE,MAAMC,SAAS,GAAIT,IAAD,IAAwB;AACxC,QAAMU,QAAQ,GAAIC,IAAD,IACfA,IAAI,CAACC,KAAL,CAAWL,IAAI,IAAIA,IAAI,KAAKI,IAAI,CAAC,CAAD,CAAhC,IAAuCA,IAAI,CAAC,CAAD,CAA3C,GAAiD,IADnD;;AAGA,QAAME,OAAO,GAAGb,IAAI,CAACc,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUhB,IAAI,CAACc,GAAL,CAAS,CAACC,CAAD,EAAIE,CAAJ,KAAUjB,IAAI,CAACiB,CAAD,CAAJ,CAAQD,CAAR,CAAnB,CAAnB,CAAhB;AACA,QAAME,SAAS,GAAG,CAChBlB,IAAI,CAACc,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUhB,IAAI,CAACgB,CAAD,CAAJ,CAAQA,CAAR,CAAnB,CADgB,EAEhBhB,IAAI,CAACc,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUhB,IAAI,CAACgB,CAAD,CAAJ,CAAQ,IAAIA,CAAZ,CAAnB,CAFgB,CAAlB;AAIA,QAAMG,KAAK,GAAG,CAAC,GAAGnB,IAAJ,EAAU,GAAGa,OAAb,EAAsB,GAAGK,SAAzB,CAAd;AAEA,SAAOC,KAAK,CAACjB,MAAN,CAAoB,CAACkB,MAAD,EAAST,IAAT,KAAkBS,MAAM,IAAIV,QAAQ,CAACC,IAAD,CAAxD,EAAgE,IAAhE,CAAP;AACD,CAZD;;AAcA,MAAMU,IAAI,GAAG,CAACrB,IAAD,EAAaiB,CAAb,EAAwBD,CAAxB,KAAsC;AACjD,MAAI,CAACP,SAAS,CAACT,IAAD,CAAV,IAAoB,CAACA,IAAI,CAACgB,CAAD,CAAJ,CAAQC,CAAR,CAAzB,EAAqC;AACnCjB,IAAAA,IAAI,CAACgB,CAAD,CAAJ,CAAQC,CAAR,IAAalB,iBAAiB,CAACC,IAAD,CAAjB,GAA0B,CAA1B,GAA8B,CAA3C;AACD;AACF,CAJD;;AAMFL,QAAQ,CAAC2B,MAAT,CAAgB,oBAAC,GAAD;AAAK,EAAA,OAAO,EAAE,MAAM,CAAE,CAAtB;AAAwB,EAAA,OAAO,EAAExB,WAAjC;AAA8C,EAAA,MAAM,EAAEW,SAAS,EAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAsFc,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAtF,E,CAEA;AACA;AACA;;AACA3B,aAAa,CAAC4B,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\ntype Cell = 1 | 2 | null;\ntype Winner = Cell\ntype Owner = Cell\ntype Row = Cell[];\ntype Line = Row;\ntype Game = Row[];\nconst initialGame: Game = [\n    [null, null, null],\n    [null, null, null],\n    [null, null, null],\n];\n\nconst isFirstPlayerTurn = (game: Game): boolean => {\n    const emptyCells = game\n      .reduce<Cell[]>((acc, row) => acc.concat(row), [])\n      .filter(cell => cell === null);\n  \n    return emptyCells.length % 2 !== 0;\n  };\n  \n  const getWinner = (game: Game): Winner => {\n    const getOwner = (line: Line): Owner =>\n      line.every(cell => cell === line[0]) ? line[0] : null;\n  \n    const columns = game.map((_, y) => game.map((_, x) => game[x][y]));\n    const diagonals = [\n      game.map((_, y) => game[y][y]),\n      game.map((_, y) => game[y][2 - y])\n    ];\n    const lines = [...game, ...columns, ...diagonals];\n  \n    return lines.reduce<Owner>((winner, line) => winner || getOwner(line), null);\n  };\n\n  const play = (game: Game, x: number, y: number) => {\n    if (!getWinner(game) && !game[y][x]) {\n      game[y][x] = isFirstPlayerTurn(game) ? 1 : 2\n    }\n  }\n\nReactDOM.render(<App onClick={() => {}} appGame={initialGame} winner={getWinner()}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}