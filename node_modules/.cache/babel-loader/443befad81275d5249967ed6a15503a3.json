{"ast":null,"code":"var _jsxFileName = \"/Users/imac/React/tictactoes/src/Cell.tsx\";\nimport * as React from \"react\";\nconst initialGame = [[null, null, null], [null, null, null], [null, null, null]];\n\nconst isFirstPlayerTurn = game => {\n  const emptyCells = game.reduce((acc, row) => acc.concat(row), []).filter(cell => cell === null);\n  return emptyCells.length % 2 !== 0;\n};\n\nconst getWinner = game => {\n  const getOwner = line => line.every(cell => cell === line[0]) ? line[0] : null;\n\n  const columns = game.map((_, y) => game.map((_, x) => game[x][y]));\n  const diagonals = [game.map((_, y) => game[y][y]), game.map((_, y) => game[y][2 - y])];\n  const lines = [...game, ...columns, ...diagonals];\n  return lines.reduce((winner, line) => winner || getOwner(line), null);\n};\n\nconst play = (game, x, y) => getWinner(game) || game[y][x] ? game : produce(game, proxy => {\n  proxy[y][x] = isFirstPlayerTurn(game) ? 1 : 2;\n});\n\nconst Cell = cellProps => {\n  return React.createElement(\"td\", {\n    className: \"cell\",\n    onClick: cellProps.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, cellProps.cell === 1 ? \"X\" : cellProps.cell === 2 ? \"O\" : \" \", cellProps.indexRow + \" \" + cellProps.indexCollumn);\n};\n\nexport default Cell;","map":{"version":3,"sources":["/Users/imac/React/tictactoes/src/Cell.tsx"],"names":["React","initialGame","isFirstPlayerTurn","game","emptyCells","reduce","acc","row","concat","filter","cell","length","getWinner","getOwner","line","every","columns","map","_","y","x","diagonals","lines","winner","play","produce","proxy","Cell","cellProps","onClick","indexRow","indexCollumn"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AASA,MAAMC,WAAiB,GAAG,CACxB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CADwB,EAExB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAFwB,EAGxB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAHwB,CAA1B;;AAMA,MAAMC,iBAAiB,GAAIC,IAAD,IAAyB;AACjD,QAAMC,UAAU,GAAGD,IAAI,CACpBE,MADgB,CACD,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,CAACE,MAAJ,CAAWD,GAAX,CADb,EAC8B,EAD9B,EAEhBE,MAFgB,CAETC,IAAI,IAAIA,IAAI,KAAK,IAFR,CAAnB;AAIA,SAAON,UAAU,CAACO,MAAX,GAAoB,CAApB,KAA0B,CAAjC;AACD,CAND;;AAQA,MAAMC,SAAS,GAAIT,IAAD,IAAwB;AACxC,QAAMU,QAAQ,GAAIC,IAAD,IACfA,IAAI,CAACC,KAAL,CAAWL,IAAI,IAAIA,IAAI,KAAKI,IAAI,CAAC,CAAD,CAAhC,IAAuCA,IAAI,CAAC,CAAD,CAA3C,GAAiD,IADnD;;AAGA,QAAME,OAAO,GAAGb,IAAI,CAACc,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUhB,IAAI,CAACc,GAAL,CAAS,CAACC,CAAD,EAAIE,CAAJ,KAAUjB,IAAI,CAACiB,CAAD,CAAJ,CAAQD,CAAR,CAAnB,CAAnB,CAAhB;AACA,QAAME,SAAS,GAAG,CAChBlB,IAAI,CAACc,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUhB,IAAI,CAACgB,CAAD,CAAJ,CAAQA,CAAR,CAAnB,CADgB,EAEhBhB,IAAI,CAACc,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUhB,IAAI,CAACgB,CAAD,CAAJ,CAAQ,IAAIA,CAAZ,CAAnB,CAFgB,CAAlB;AAIA,QAAMG,KAAK,GAAG,CAAC,GAAGnB,IAAJ,EAAU,GAAGa,OAAb,EAAsB,GAAGK,SAAzB,CAAd;AAEA,SAAOC,KAAK,CAACjB,MAAN,CAAoB,CAACkB,MAAD,EAAST,IAAT,KAAkBS,MAAM,IAAIV,QAAQ,CAACC,IAAD,CAAxD,EAAgE,IAAhE,CAAP;AACD,CAZD;;AAcA,MAAMU,IAAI,GAAG,CAACrB,IAAD,EAAaiB,CAAb,EAAwBD,CAAxB,KACXP,SAAS,CAACT,IAAD,CAAT,IAAmBA,IAAI,CAACgB,CAAD,CAAJ,CAAQC,CAAR,CAAnB,GACIjB,IADJ,GAEIsB,OAAO,CAACtB,IAAD,EAAOuB,KAAK,IAAI;AACrBA,EAAAA,KAAK,CAACP,CAAD,CAAL,CAASC,CAAT,IAAclB,iBAAiB,CAACC,IAAD,CAAjB,GAA0B,CAA1B,GAA8B,CAA5C;AACD,CAFM,CAHb;;AAeA,MAAMwB,IAAyB,GAAGC,SAAS,IAAI;AAC7C,SACE;AAAI,IAAA,SAAS,EAAC,MAAd;AAAqB,IAAA,OAAO,EAAEA,SAAS,CAACC,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,SAAS,CAAClB,IAAV,KAAmB,CAAnB,GAAuB,GAAvB,GAA6BkB,SAAS,CAAClB,IAAV,KAAmB,CAAnB,GAAuB,GAAvB,GAA6B,GAD7D,EAEGkB,SAAS,CAACE,QAAV,GAAqB,GAArB,GAA2BF,SAAS,CAACG,YAFxC,CADF;AAMD,CAPD;;AASA,eAAeJ,IAAf","sourcesContent":["import * as React from \"react\";\n\ntype Cell = 1 | 2 | null;\ntype Owner = Cell;\ntype Winner = Cell;\ntype Row = Cell[];\ntype Line = Row;\ntype Game = Row[];\n\nconst initialGame: Game = [\n  [null, null, null],\n  [null, null, null],\n  [null, null, null]\n];\n\nconst isFirstPlayerTurn = (game: Game): boolean => {\n  const emptyCells = game\n    .reduce<Cell[]>((acc, row) => acc.concat(row), [])\n    .filter(cell => cell === null);\n\n  return emptyCells.length % 2 !== 0;\n};\n\nconst getWinner = (game: Game): Winner => {\n  const getOwner = (line: Line): Owner =>\n    line.every(cell => cell === line[0]) ? line[0] : null;\n\n  const columns = game.map((_, y) => game.map((_, x) => game[x][y]));\n  const diagonals = [\n    game.map((_, y) => game[y][y]),\n    game.map((_, y) => game[y][2 - y])\n  ];\n  const lines = [...game, ...columns, ...diagonals];\n\n  return lines.reduce<Owner>((winner, line) => winner || getOwner(line), null);\n};\n\nconst play = (game: Game, x: number, y: number): Game =>\n  getWinner(game) || game[y][x]\n    ? game\n    : produce(game, proxy => {\n        proxy[y][x] = isFirstPlayerTurn(game) ? 1 : 2;\n      });\n\n\nexport type CellProps = {\n  onClick: () => void;\n  cell: Cell;\n  indexRow: number;\n  indexCollumn: number;\n};\n\nconst Cell: React.FC<CellProps> = cellProps => {\n  return (\n    <td className=\"cell\" onClick={cellProps.onClick}>\n      {cellProps.cell === 1 ? \"X\" : cellProps.cell === 2 ? \"O\" : \" \"}\n      {cellProps.indexRow + \" \" + cellProps.indexCollumn}\n    </td>\n  );\n};\n\nexport default Cell;\n"]},"metadata":{},"sourceType":"module"}